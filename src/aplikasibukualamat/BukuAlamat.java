/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aplikasibukualamat;

import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class BukuAlamat extends javax.swing.JFrame {

    private Connection connection;
    private Object dbAlamat;

    /**
     * Creates new form BukuAlamat
     */
    public BukuAlamat() {
        initComponents();
        try {
            // Membuat koneksi ke database SQLite dengan nama dbAlamat.db
            connection = DriverManager.getConnection("jdbc:sqlite:dbAlamat.db");
            // Memanggil metode tambahalamat untuk menjalankan logika tambahan
            tambahalamat();
        } catch (SQLException e) {
            // Menangkap dan mencetak stack trace jika terjadi SQLException
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        txtnama = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtalamat = new javax.swing.JTextArea();
        cbbkodepos = new javax.swing.JComboBox<>();
        txttelepon = new javax.swing.JTextField();
        txtemail = new javax.swing.JTextField();
        btntambah = new javax.swing.JButton();
        btnubah = new javax.swing.JButton();
        btnhapus = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblalamat = new javax.swing.JTable();
        jLabel21 = new javax.swing.JLabel();
        txtcari = new javax.swing.JTextField();
        btncari = new javax.swing.JButton();
        impor = new javax.swing.JButton();
        ekspor = new javax.swing.JButton();
        btnKeluar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 204, 204));

        jPanel4.setBackground(new java.awt.Color(255, 204, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Tambah Data"));

        jLabel16.setText("Nama Lengkap :");

        jLabel17.setText("Alamat :");

        jLabel18.setText("Kode Pos :");

        jLabel19.setText("Telepon :");

        jLabel20.setText("Email :");

        txtalamat.setColumns(20);
        txtalamat.setRows(5);
        jScrollPane3.setViewportView(txtalamat);

        cbbkodepos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "70713", "70714", "70732", "70733", "70722", "70724", "70723", " " }));
        cbbkodepos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbkodeposActionPerformed(evt);
            }
        });

        btntambah.setText("Tambah");
        btntambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btntambahActionPerformed(evt);
            }
        });

        btnubah.setText("Ubah");
        btnubah.setMaximumSize(new java.awt.Dimension(91, 29));
        btnubah.setMinimumSize(new java.awt.Dimension(91, 29));
        btnubah.setPreferredSize(new java.awt.Dimension(91, 29));
        btnubah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnubahActionPerformed(evt);
            }
        });

        btnhapus.setText("Hapus");
        btnhapus.setMaximumSize(new java.awt.Dimension(91, 29));
        btnhapus.setMinimumSize(new java.awt.Dimension(91, 29));
        btnhapus.setPreferredSize(new java.awt.Dimension(91, 29));
        btnhapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnhapusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(btntambah)
                .addGap(48, 48, 48)
                .addComponent(btnubah, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addComponent(btnhapus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel20)
                    .addComponent(jLabel19)
                    .addComponent(jLabel18)
                    .addComponent(jLabel17)
                    .addComponent(jLabel16))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtnama, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(cbbkodepos, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(txttelepon, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(txtemail, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel16))
                    .addComponent(txtnama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel17)
                        .addGap(28, 28, 28)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(cbbkodepos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addGap(18, 18, 18)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txttelepon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtemail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addGap(81, 81, 81)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btntambah)
                    .addComponent(btnubah, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnhapus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel15.setText("APLIKASI BUKU ALAMAT");

        jPanel5.setBackground(new java.awt.Color(255, 204, 204));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Buku Alamat"));

        tblalamat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nama", "Alamat", "Kode Pos", "Telepon", "Email"
            }
        ));
        tblalamat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblalamatMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblalamat);

        jLabel21.setText("Cari Alamat Berdasarkan Nama :");

        btncari.setText("Cari");
        btncari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncariActionPerformed(evt);
            }
        });

        impor.setText("Import");
        impor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imporActionPerformed(evt);
            }
        });

        ekspor.setText("Eksport");
        ekspor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eksporActionPerformed(evt);
            }
        });

        btnKeluar.setText("Keluar");
        btnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKeluarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(147, 147, 147)
                .addComponent(jLabel21)
                .addGap(37, 37, 37)
                .addComponent(txtcari, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(btncari)
                .addGap(260, 260, 260))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(impor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ekspor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnKeluar))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 999, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btncari)
                    .addComponent(txtcari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(impor)
                    .addComponent(ekspor)
                    .addComponent(btnKeluar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel15)
                .addGap(626, 626, 626))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btntambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btntambahActionPerformed
         // Memanggil metode tambahAlamat ketika tombol tambah diklik
        tambahAlamat();
    }//GEN-LAST:event_btntambahActionPerformed

    private void tblalamatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblalamatMouseClicked
         // Memanggil metode tambahAlamat ketika tombol tambah diklik
        tableRowClicked(evt);
    }//GEN-LAST:event_tblalamatMouseClicked

    private void btnhapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnhapusActionPerformed
        // Mendapatkan baris yang dipilih di tabel alamat
        int selectedRow = tblalamat.getSelectedRow(); 
        // Menampilkan pesan jika tidak ada baris yang dipilih
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih alamat yang ingin dihapus!");
            return;
        }

        // Mengambil ID kontak dari kolom pertama pada baris yang dipilih
        int id = (int) tblalamat.getValueAt(selectedRow, 0);

        // Menampilkan dialog konfirmasi untuk penghapusan
        int confirm = JOptionPane.showConfirmDialog(this,
                "Apakah Anda yakin ingin menghapus kontak ini?",
                "Konfirmasi Hapus",
                JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            // SQL untuk menghapus data dari tabel alamat berdasarkan ID
            String sql = "DELETE FROM alamat WHERE id = ?";
            try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
                pstmt.setInt(1, id); // Mengisi parameter ID pada query
                pstmt.executeUpdate();// Menjalankan query penghapusan
                JOptionPane.showMessageDialog(this, "Alamat berhasil dihapus!"); // Menampilkan pesan bahwa alamat berhasil dihapus
                refreshTable();// Memperbarui tampilan JTable setelah data dihapus
                
            // Mengosongkan form input    
            txtnama.setText("");
            txtalamat.setText("");
            cbbkodepos.setSelectedIndex(0);
            txttelepon.setText("");
            txtemail.setText("");

            } catch (SQLException e) {
                // Menampilkan pesan error jika penghapusan gagal
                JOptionPane.showMessageDialog(this, "Gagal menghapus alalmat");
                e.printStackTrace();
            }}
    }//GEN-LAST:event_btnhapusActionPerformed

    private void btnubahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnubahActionPerformed
        int selectedRow = tblalamat.getSelectedRow(); // Mendapatkan baris yang dipilih di tabel alamat

        // Validasi: Pastikan ada baris yang dipilih
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih alamat yang ingin diubah!");
            return;
        }

        // Ambil ID kontak dari kolom pertama
        int id = (int) tblalamat.getValueAt(selectedRow, 0);

        // Ambil data baru dari input
        String nama = txtnama.getText();
        String alamat = txtalamat.getText();
        String kodepos = (String) cbbkodepos.getSelectedItem();
        String telepon = txttelepon.getText();
        String email = txtemail.getText();

        // Validasi input
        if (nama == null || nama.isEmpty() || alamat == null || alamat.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nama dan Alamat tidak boleh kosong!");
            return;
        }

        // Update data di database
        String sql = "UPDATE alamat SET nama = ?, alamat = ?, kodepos = ?, telepon = ?, email = ? WHERE id = ?";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, nama);
            pstmt.setString(2, alamat);
            pstmt.setString(3, kodepos);
            pstmt.setString(4, telepon);
            pstmt.setString(5, email);
            pstmt.setInt(6, id);

            pstmt.executeUpdate(); // Eksekusi query
            JOptionPane.showMessageDialog(this, "Alamat berhasil diperbarui!");

            // Perbarui JTable
            refreshTable();

            // Bersihkan input setelah pengubahan
            txtnama.setText("");
            txtalamat.setText("");
            cbbkodepos.setSelectedIndex(0);
            txttelepon.setText("");
            txtemail.setText("");

        } catch (SQLException e) {
            // Menampilkan pesan error jika terjadi kegagalan
            JOptionPane.showMessageDialog(this, "Gagal mengubah alamat");
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnubahActionPerformed

    private void btncariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncariActionPerformed
        String keyword = txtcari.getText();// Mengambil kata kunci pencarian dari input pengguna

         // Validasi: Pastikan kata kunci tidak kosong
        if (keyword == null || keyword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Masukkan nama untuk pencarian!");
            return;
        }
        String sql = "SELECT * FROM alamat WHERE nama LIKE ?";// Query untuk mencari data berdasarkan nama
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            // Mengisi parameter pada query dengan kata kunci pencarian
            pstmt.setString(1, "%" + keyword + "%"); 
            try (ResultSet rs = pstmt.executeQuery()) {
                // Membuat model tabel untuk menampilkan hasil pencarian
                DefaultTableModel model = new DefaultTableModel();
                model.addColumn("ID");
                model.addColumn("Nama");
                model.addColumn("Alamat");
                model.addColumn("Kode Pos");
                model.addColumn("Telepon");
                model.addColumn("Email");

                // Menambahkan hasil pencarian ke model tabel
                while (rs.next()) {
                    Object[] row = {
                        rs.getInt("id"),
                        rs.getString("nama"),
                        rs.getString("alamat"),
                        rs.getString("kodepos"),
                        rs.getString("telepon"),
                        rs.getString("email")
                    };
                    model.addRow(row);
                }

                // Perbarui JTable
                tblalamat.setModel(model);

            }
        } catch (SQLException e) {
            // Menampilkan pesan error jika pencarian gagal
            JOptionPane.showMessageDialog(this, "Gagal melakukan pencarian.");
            e.printStackTrace();
        }         
    }//GEN-LAST:event_btncariActionPerformed

    private void cbbkodeposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbkodeposActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbbkodeposActionPerformed

    private void eksporActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eksporActionPerformed
         // Membuat dialog pemilihan file untuk menyimpan file CSV
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Simpan File CSV");
         // Menampilkan dialog pemilihan file dan menangkap aksi pengguna
        int userSelection = fileChooser.showSaveDialog(this);

        // Jika pengguna menyetujui untuk menyimpan file
        if (userSelection == JFileChooser.APPROVE_OPTION) {
        // Mendapatkan path file yang dipilih dan menambahkan ekstensi .csv
        String filePath = fileChooser.getSelectedFile().getAbsolutePath() + ".csv";
        // Memanggil metode eksporKontakKeCSV dengan path file yang dipilih
        eksporKontakKeCSV(filePath);
    }
    }//GEN-LAST:event_eksporActionPerformed

    private void imporActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imporActionPerformed
        // Membuat dialog pemilihan file untuk membuka file CSV
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Pilih File CSV");
        // Menampilkan dialog pemilihan file dan menangkap aksi pengguna
        int userSelection = fileChooser.showOpenDialog(this);

        // Jika pengguna menyetujui untuk membuka file
        if (userSelection == JFileChooser.APPROVE_OPTION) {
        // Mendapatkan path file yang dipilih
        String filePath = fileChooser.getSelectedFile().getAbsolutePath();
        // Memanggil metode imporKontakDariCSV dengan path file yang dipilih
        imporKontakDariCSV(filePath);
        // Memperbarui tampilan JTable setelah data diimpor
        refreshTable();
    }
    }//GEN-LAST:event_imporActionPerformed

    private void btnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKeluarActionPerformed
         // Menutup jendela aplikasi
        dispose();
    }//GEN-LAST:event_btnKeluarActionPerformed
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BukuAlamat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BukuAlamat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BukuAlamat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BukuAlamat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BukuAlamat().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnKeluar;
    private javax.swing.JButton btncari;
    private javax.swing.JButton btnhapus;
    private javax.swing.JButton btntambah;
    private javax.swing.JButton btnubah;
    private javax.swing.JComboBox<String> cbbkodepos;
    private javax.swing.JButton ekspor;
    private javax.swing.JButton impor;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tblalamat;
    private javax.swing.JTextArea txtalamat;
    private javax.swing.JTextField txtcari;
    private javax.swing.JTextField txtemail;
    private javax.swing.JTextField txtnama;
    private javax.swing.JTextField txttelepon;
    // End of variables declaration//GEN-END:variables

    private void tambahalamat() {
        // Membuat query SQL untuk membuat tabel alamat
        String sql = "CREATE TABLE IF NOT EXISTS alamat (" +
                     "id INTEGER PRIMARY KEY AUTOINCREMENT, " +
                     "nama TEXT NOT NULL, " +
                     "alamat TEXT NOT NULL, " +
                     "kodepos TEXT NOT NULL, " +
                     "telepon TEXT NOT NULL, " +
                     "email TEXT NOT NULL)";
        try (Statement stmt = connection.createStatement()) {
             // Menjalankan query SQL untuk membuat tabel
            stmt.execute(sql); 
        } catch (SQLException e) {
            // Menangkap error yang terjadi saat membuat tabel dan mencetaknya
            e.printStackTrace();
        }
    }

    private void tambahAlamat() {
         // Query SQL untuk menambahkan data ke tabel alamat
        String sql = "INSERT INTO alamat (nama, alamat, kodepos, telepon, email) VALUES (?, ?, ?, ?, ?)";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
        // Mengambil input dari form
        String nama = txtnama.getText();
        String alamat = txtalamat.getText();
        String kodepos = (String) cbbkodepos.getSelectedItem();
        String telepon = txttelepon.getText();
        String email = txtemail.getText();

        // Validasi input form
        if (nama == null || nama.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nama tidak boleh kosong!", "Validasi Gagal", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (alamat == null || alamat.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nomor telepon tidak boleh kosong!", "Validasi Gagal", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (kodepos == null || kodepos.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nomor telepon tidak boleh kosong!", "Validasi Gagal", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!telepon.matches("\\d+")) {
            JOptionPane.showMessageDialog(this, "Nomor telepon hanya boleh berisi angka!", "Validasi Gagal", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (telepon.length() < 10 || telepon.length() > 13) {
            JOptionPane.showMessageDialog(this, "Nomor telepon harus memiliki panjang antara 10 hingga 13 digit!", "Validasi Gagal", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (email == null || email.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nomor telepon tidak boleh kosong!", "Validasi Gagal", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Mengisi parameter query dengan data input
        pstmt.setString(1, nama);
        pstmt.setString(2, alamat);
        pstmt.setString(3, kodepos);
        pstmt.setString(4, telepon);
        pstmt.setString(5, email);
        pstmt.executeUpdate();// Menjalankan query untuk menambahkan data
        System.out.println("Alamat berhasil ditambahkan!"); // Menampilkan pesan berhasil
        
        refreshTable();// Memperbarui tampilan tabel

        // Mengosongkan form input
        txtnama.setText("");
        txtalamat.setText("");
        cbbkodepos.setSelectedIndex(0);
        txttelepon.setText("");
        txtemail.setText("");
    } catch (SQLException e) {
         // Menangkap error yang terjadi saat menambahkan data
        System.out.println("Gagal menambahkan kontak.");
        e.printStackTrace();
    }
    }

    private void refreshTable() {
        // Query SQL untuk mengambil semua data dari tabel alamat
        String sql = "SELECT * FROM alamat";
        try (PreparedStatement pstmt = connection.prepareStatement(sql);
         ResultSet rs = pstmt.executeQuery()) {

        // Membuat model tabel untuk JTable
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Nama");
        model.addColumn("Alamat");
        model.addColumn("Kode Pos");
        model.addColumn("Telepon");
        model.addColumn("Email");

        // Mengambil data dari ResultSet dan menambahkannya ke model tabel
        while (rs.next()) {
            Object[] row = {
                rs.getInt("id"),         // ID
                rs.getString("nama"),    // Nama
                rs.getString("alamat"),  // Alamat
                rs.getString("kodepos"), // Kode Pos
                rs.getString("telepon"),// Telepon
                rs.getString("email")// Email
            };
            model.addRow(row);
        }

        // Mengatur model baru ke JTable
        tblalamat.setModel(model);

    } catch (SQLException e) {
         // Menangkap error yang terjadi saat mengambil data dari database
        JOptionPane.showMessageDialog(this, "Gagal mengambil data kontak.");
        e.printStackTrace();
    }
    }

    private void tableRowClicked(MouseEvent evt) {
        int selectedRow = tblalamat.getSelectedRow(); // Ambil indeks baris yang diklik

        if (selectedRow != -1) { // Pastikan ada baris yang dipilih
        // Ambil data dari JTable berdasarkan kolom
        String nama = (String) tblalamat.getValueAt(selectedRow, 1); // Kolom Nama
        String alamat = (String) tblalamat.getValueAt(selectedRow, 2); // Kolom alamat
        String kodepos = (String) tblalamat.getValueAt(selectedRow, 3); // Kolom Kode Pos 
        String telepon = (String) tblalamat.getValueAt(selectedRow, 4);// Kolom Telepon
        String email = (String) tblalamat.getValueAt(selectedRow, 5);// Kolom Email 
        
        // Tampilkan data ke input
        txtnama.setText(nama);
        txtalamat.setText(alamat);
        cbbkodepos.setSelectedItem(kodepos);
        txttelepon.setText(telepon);
        txtemail.setText(email);       
    }
    }

    private void eksporKontakKeCSV(String filePath) {
        String sql = "SELECT * FROM alamat"; // Query untuk mengambil semua data
        try (PreparedStatement pstmt = connection.prepareStatement(sql);
        ResultSet rs = pstmt.executeQuery();
               
        FileWriter writer = new FileWriter(filePath)) {
        // Menulis header ke file CSV  
        writer.append("ID,Nama,Alamat,Kodepos,Telepon,Email\n");
        
        // Menulis data dari ResultSet ke file CSV
        while (rs.next()) {
            writer.append(rs.getInt("id") + ",");
            writer.append(rs.getString("nama") + ",");
            writer.append(rs.getString("alamat") + ",");
            writer.append(rs.getString("kodepos") + ",");
            writer.append(rs.getString("telepon") + ",");
            writer.append(rs.getString("email") + "\n");
        }

        writer.flush();
        // Menampilkan pesan sukses
        JOptionPane.showMessageDialog(null, "Data berhasil diekspor ke file CSV!");

    } catch (SQLException | IOException e) {
        // Menampilkan pesan error jika gagal mengekspor
        JOptionPane.showMessageDialog(null, "Gagal mengekspor data ke CSV: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    }

    private void imporKontakDariCSV(String filePath) {
        // Query SQL untuk menambahkan data ke tabel alamat
        String sql = "INSERT INTO alamat (id, nama, alamat, kodepos, telepon, email) VALUES (?, ?, ?, ?, ?, ?)"; 
        try (Connection conn = DriverManager.getConnection("jdbc:sqlite:dbAlamat.db");  
             BufferedReader br = new BufferedReader(new FileReader(filePath));  
             PreparedStatement pstmt = conn.prepareStatement(sql)) {  

            String line;  
            int rowCount = 0;  

            // Membaca baris pertama (header) 
            br.readLine();  

            // Membaca file CSV baris demi baris
            while ((line = br.readLine()) != null) {  
                String[] values = line.split(",");  
                if (values.length < 6) { 
                    // Abaikan baris yang tidak valid
                    JOptionPane.showMessageDialog(null, "Baris tidak valid ditemukan: " + line, "Peringatan", JOptionPane.WARNING_MESSAGE);  
                    continue;  
                }  

                try {  
                    // Memasukkan data ke PreparedStatement
                    int id = Integer.parseInt(values[0].trim());//ID
                    String nama = values[1].trim(); //Nama           
                    String alamat = values[2].trim();//Alamat                
                    String kodepos = values[3].trim();//Kode Pos 
                    String telepon = values[4].trim(); //Telepon
                    String email = values[5].trim(); //Email

                    pstmt.setInt(1, id);   
                    pstmt.setString(2, nama);   
                    pstmt.setString(3, alamat);   
                    pstmt.setString(4, kodepos);  
                    pstmt.setString(5, telepon); 
                    pstmt.setString(6, email); 

                    pstmt.addBatch();  // Tambahkan ke batch
                    rowCount++;  
                } catch (NumberFormatException nfe) {  
                    JOptionPane.showMessageDialog(null, "ID harus berupa angka: " + values[0] + " di baris " + line, "Peringatan", JOptionPane.WARNING_MESSAGE);  
                }  
            }  

            // Menjalankan batch
            if (rowCount > 0) {  
                pstmt.executeBatch();  
                JOptionPane.showMessageDialog(null, rowCount + " data berhasil diimpor dari file CSV!");  
            } else {  
                JOptionPane.showMessageDialog(null, "Tidak ada data yang valid untuk diimpor.", "Informasi", JOptionPane.INFORMATION_MESSAGE);  
            }  

        // Menampilkan pesan error jika gagal mengimpor    
        } catch (SQLException ex) {  
            JOptionPane.showMessageDialog(null, "Kesalahan basis data: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);  
            ex.printStackTrace();  
        } catch (IOException ex) {  
            JOptionPane.showMessageDialog(null, "Gagal membaca file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);  
            ex.printStackTrace();  
        } catch (Exception e) {  
            JOptionPane.showMessageDialog(null, "Gagal mengimpor data dari CSV: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);  
            e.printStackTrace();  
        }
    }
}
